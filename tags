!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUF_HELP	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_LOWER	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_LOWER_HEADER	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_LOWER_HEADER_MINIMAL	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_MAX	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_MENU	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
BUF_UPPER	src/orig/game.h	/^enum { BUF_LOWER_HEADER, BUF_LOWER_HEADER_MINIMAL, BUF_UPPER, BUF_LOWER, BUF_HELP, BUF_MENU, BUF_MAX };$/;"	e	enum:__anon2
Client	src/client.cpp	/^    Client::Client() : Connection(), backgroundThread_(nullptr) {$/;"	f	class:yahtsee::Client
Client	src/client.cpp	/^    Client::Client(Client &&other) : Connection(std::move(other)),$/;"	f	class:yahtsee::Client
Client	src/client.cpp	/^    Client::Client(SOCKET sock, const sockaddr_storage &addr, const std::shared_ptr<ConnectionState> &state)$/;"	f	class:yahtsee::Client
Client	src/client.h	/^    class Client : public Connection {$/;"	c	namespace:yahtsee
ClientAction	src/client.h	/^    enum class ClientAction : int {$/;"	c	namespace:yahtsee
Config	src/matchmaker.h	/^        typedef nlohmann::json Config;$/;"	t	class:yahtsee::Matchmaker
Config	src/player.h	/^        typedef nlohmann::json Config;$/;"	t	class:yahtsee::Player
Connection	src/connection.cpp	/^    Connection::Connection() : buffered_socket() {$/;"	f	class:yahtsee::Connection
Connection	src/connection.cpp	/^    Connection::Connection(Connection &&other) : buffered_socket(std::move(other)) {$/;"	f	class:yahtsee::Connection
Connection	src/connection.cpp	/^    Connection::Connection(SOCKET sock, const sockaddr_storage &addr, const std::shared_ptr<ConnectionState> &state)$/;"	f	class:yahtsee::Connection
Connection	src/connection.h	/^    class Connection : public coda::net::buffered_socket {$/;"	c	namespace:yahtsee
ConnectionFactory	src/connection_factory.cpp	/^    ConnectionFactory::ConnectionFactory(StateManager *state) : state_(state) {}$/;"	f	class:yahtsee::ConnectionFactory
ConnectionFactory	src/connection_factory.h	/^    class ConnectionFactory : public coda::net::socket_factory {$/;"	c	namespace:yahtsee
ConnectionPtr	src/connection_factory.cpp	/^    typedef std::function <void(const std::shared_ptr <Connection> &conn)> ConnectionPtr;$/;"	t	namespace:yahtsee	file:
ConnectionState	src/connection_state.cpp	/^    ConnectionState::ConnectionState(StateManager *state) :$/;"	f	class:yahtsee::ConnectionState
ConnectionState	src/connection_state.h	/^    class ConnectionState {$/;"	c	namespace:yahtsee
CursesInput	src/input_manager.cpp	/^    class CursesInput : public Inputer {$/;"	c	namespace:yahtsee	file:
Dialog	src/game_ui.cpp	/^    Dialog::Dialog() {}$/;"	f	class:yahtsee::Dialog
Dialog	src/game_ui.cpp	/^    Dialog::Dialog(const std::string &message) : message_(message) {}$/;"	f	class:yahtsee::Dialog
Dialog	src/game_ui.h	/^    class Dialog {$/;"	c	namespace:yahtsee
Engine	src/player.h	/^        class Engine : public coda::die::engine {$/;"	c	class:yahtsee::Player
EventManager	src/event_manager.cpp	/^    EventManager::EventManager(StateManager *state) : state_(state) {}$/;"	f	class:yahtsee::EventManager
EventManager	src/event_manager.h	/^    class EventManager {$/;"	c	namespace:yahtsee
FINISHED	src/game_logic.h	/^        static const int FINISHED = (1 << 0);$/;"	m	class:yahtsee::GameLogic
FLAG_CONTINUE	src/orig/game.h	/^    static const int FLAG_CONTINUE = (1 << 3);$/;"	m	class:game
FLAG_HOSTING	src/orig/game.h	/^    static const int FLAG_HOSTING = (1 << 0);$/;"	m	class:game
FLAG_JOINING	src/orig/game.h	/^    static const int FLAG_JOINING = (1 << 1);$/;"	m	class:game
FLAG_LAN	src/orig/game.h	/^    static const int FLAG_LAN = (1 << 5);$/;"	m	class:game
FLAG_NEEDS_CLEAR	src/orig/caca_game.h	/^    static const int FLAG_NEEDS_CLEAR = (1 << 1);$/;"	m	class:caca_game
FLAG_NEEDS_DISPLAY	src/orig/caca_game.h	/^    static const int FLAG_NEEDS_DISPLAY = (1 << 0);$/;"	m	class:caca_game
FLAG_ROLLING	src/orig/game.h	/^    static const int FLAG_ROLLING = (1 << 4);$/;"	m	class:game
FLAG_STATE_FORCE	src/orig/game.h	/^    static const int FLAG_STATE_FORCE = (1 << 1);$/;"	m	class:game
FLAG_STATE_TRANSIENT	src/orig/game.h	/^    static const int FLAG_STATE_TRANSIENT = (1 << 0);$/;"	m	class:game
FLAG_WAITING_FOR_TURN	src/orig/game.h	/^    static const int FLAG_WAITING_FOR_TURN = (1 << 2);$/;"	m	class:game
GAME_API_URL	src/matchmaker.cpp	/^    const char *Matchmaker::GAME_API_URL = "connect.micrantha.com";$/;"	m	class:yahtsee::Matchmaker	file:
GAME_API_URL	src/matchmaker.h	/^        static const char *GAME_API_URL;$/;"	m	class:yahtsee::Matchmaker
GAME_TYPE	src/matchmaker.cpp	/^    const char *Matchmaker::GAME_TYPE = "yahtsee";$/;"	m	class:yahtsee::Matchmaker	file:
GAME_TYPE	src/matchmaker.h	/^        static const char *GAME_TYPE;$/;"	m	class:yahtsee::Matchmaker
Game	src/game.cpp	/^    Game::Game(int seed) : state_() {$/;"	f	class:yahtsee::Game
Game	src/game.h	/^    class Game {$/;"	c	namespace:yahtsee
GameLogic	src/game_logic.h	/^    class GameLogic {$/;"	c	namespace:yahtsee
GameState	src/game_state.h	/^        GameState(StateManager *state) : state_(state) {}$/;"	f	class:yahtsee::GameState
GameState	src/game_state.h	/^    class GameState : public Updatable, public Renderable {$/;"	c	namespace:yahtsee
GameUi	src/game_ui.h	/^    class GameUi : public Renderable, public Updatable {$/;"	c	namespace:yahtsee
HELP	src/orig/game.cpp	/^const char *HELP = "Type '?' to show command options.  Use the arrow keys to cycle views modes.";$/;"	v
HORIZONTAL	src/orig/game.h	/^typedef enum { HORIZONTAL, VERTICAL, MINIMAL } display_mode;$/;"	e	enum:__anon1
HOSTING	src/multiplayer.h	/^        static const int HOSTING = (1 << 0);$/;"	m	class:yahtsee::Multiplayer
Handler	src/game_ui.h	/^        typedef void (GameUi::*Handler)();$/;"	t	class:yahtsee::GameUi
INIT	src/client.h	/^        INIT,$/;"	m	class:yahtsee::ClientAction
INVALID	src/matchmaker.h	/^        static const int INVALID = -1;$/;"	m	class:yahtsee::Matchmaker
InputManager	src/game_input.h	/^    class InputManager {$/;"	c	namespace:yahtsee
InputManager	src/input_manager.cpp	/^    InputManager::InputManager() : input_(std::make_unique<CursesInput>()) {$/;"	f	class:yahtsee::InputManager
InputManager	src/input_manager.h	/^    class InputManager : public Updatable {$/;"	c	namespace:yahtsee
Inputer	src/input_manager.h	/^    class Inputer {$/;"	c	namespace:yahtsee
JOINING	src/multiplayer.h	/^        static const int JOINING = (1 << 1);$/;"	m	class:yahtsee::Multiplayer
MINIMAL	src/orig/game.h	/^typedef enum { HORIZONTAL, VERTICAL, MINIMAL } display_mode;$/;"	e	enum:__anon1
Matchmaker	src/matchmaker.cpp	/^    Matchmaker::Matchmaker(Matchmaker &&other)$/;"	f	class:yahtsee::Matchmaker
Matchmaker	src/matchmaker.cpp	/^    Matchmaker::Matchmaker(StateManager *state)$/;"	f	class:yahtsee::Matchmaker
Matchmaker	src/matchmaker.h	/^    class Matchmaker {$/;"	c	namespace:yahtsee
Menu	src/curses_ui.cpp	/^            Menu(InputManager *input) : input_(input) {}$/;"	f	class:yahtsee::curses::Menu
Menu	src/curses_ui.cpp	/^        class Menu : public yahtsee::Menu {$/;"	c	namespace:yahtsee::curses	file:
Menu	src/game_ui.cpp	/^    Menu::Menu() {}$/;"	f	class:yahtsee::Menu
Menu	src/game_ui.h	/^    class Menu : public Renderable, public Updatable {$/;"	c	namespace:yahtsee
Multiplayer	src/multiplayer.h	/^    class Multiplayer : public Matchmaker {$/;"	c	namespace:yahtsee
NewSinglePlayerState	src/game_state.cpp	/^    NewSinglePlayerState::NewSinglePlayerState(StateManager *state) : GameState(state) {$/;"	f	class:yahtsee::NewSinglePlayerState
NewSinglePlayerState	src/game_state.h	/^    class NewSinglePlayerState : public GameState {$/;"	c	namespace:yahtsee
Option	src/game_ui.h	/^            Option(T *owner, const std::string &description, const Callback &callback = nullptr) : owner_(owner),$/;"	f	class:yahtsee::impl::Option
Option	src/game_ui.h	/^        class Option {$/;"	c	namespace:yahtsee::impl
PLAYER_JOINED	src/client.h	/^        PLAYER_JOINED,$/;"	m	class:yahtsee::ClientAction
PLAYER_LEFT	src/client.h	/^        PLAYER_LEFT,$/;"	m	class:yahtsee::ClientAction
PLAYER_ROLL	src/client.h	/^        PLAYER_ROLL,$/;"	m	class:yahtsee::ClientAction
Packet	src/connection.h	/^        typedef nlohmann::json Packet;$/;"	t	class:yahtsee::Connection
Packet	src/matchmaker.h	/^        typedef nlohmann::json Packet;$/;"	t	class:yahtsee::Matchmaker
Packet	src/player.h	/^        typedef nlohmann::json Packet;$/;"	t	class:yahtsee::Player
Player	src/player.cpp	/^    Player::Player(Connection *conn, const Packet &packet) : yaht::player(&playerEngine) {$/;"	f	class:yahtsee::Player
Player	src/player.cpp	/^    Player::Player(Connection *conn, const string &id, const string &name)$/;"	f	class:yahtsee::Player
Player	src/player.cpp	/^    Player::Player(Player &&other)$/;"	f	class:yahtsee::Player
Player	src/player.cpp	/^    Player::Player(const Player &other)$/;"	f	class:yahtsee::Player
Player	src/player.cpp	/^    Player::Player(const string &name)$/;"	f	class:yahtsee::Player
Player	src/player.h	/^    class Player : public coda::yaht::player {$/;"	c	namespace:yahtsee
PlayerManager	src/player_manager.h	/^    class PlayerManager {$/;"	c	namespace:yahtsee
Renderable	src/renderable.h	/^    class Renderable {$/;"	c	namespace:yahtsee
START	src/client.h	/^        START,$/;"	m	class:yahtsee::ClientAction
StateManager	src/state_manager.cpp	/^    StateManager::StateManager() : online_(this), events_(this), ui_(factory::new_curses_ui(this)) {$/;"	f	class:yahtsee::StateManager
StateManager	src/state_manager.h	/^    class StateManager : public Updatable, public Renderable {$/;"	c	namespace:yahtsee
Ui	src/curses_ui.cpp	/^        Ui::Ui(StateManager *state) : state_(state) {$/;"	f	class:yahtsee::curses::Ui
Ui	src/curses_ui.cpp	/^        class Ui : public GameUi {$/;"	c	namespace:yahtsee::curses	file:
Updatable	src/updatable.h	/^    class Updatable {$/;"	c	namespace:yahtsee
VERTICAL	src/orig/game.h	/^typedef enum { HORIZONTAL, VERTICAL, MINIMAL } display_mode;$/;"	e	enum:__anon1
WaitingForPlayerState	src/game_state.h	/^    class WaitingForPlayerState : public GameState {$/;"	c	namespace:yahtsee
WelcomeState	src/game_state.cpp	/^    WelcomeState::WelcomeState(StateManager *state) : GameState(state), menu_(state->ui()->menu()) {$/;"	f	class:yahtsee::WelcomeState
WelcomeState	src/game_state.h	/^    class WelcomeState : public GameState {$/;"	c	namespace:yahtsee
YAHTSEE_CLIENT_H	src/client.h	/^#define YAHTSEE_CLIENT_H$/;"	d
YAHTSEE_CONNECTION_FACTORY_H	src/connection_factory.h	/^#define YAHTSEE_CONNECTION_FACTORY_H$/;"	d
YAHTSEE_CONNECTION_H	src/connection.h	/^#define YAHTSEE_CONNECTION_H$/;"	d
YAHTSEE_CONNECTION_STATE_H	src/connection_state.h	/^#define YAHTSEE_CONNECTION_STATE_H$/;"	d
YAHTSEE_GAMEACTION_H	src/event_manager.h	/^#define YAHTSEE_GAMEACTION_H$/;"	d
YAHTSEE_GAME_H	src/game.h	/^#define YAHTSEE_GAME_H$/;"	d
YAHTSEE_GAME_INPUT_H	src/game_input.h	/^#define YAHTSEE_GAME_INPUT_H$/;"	d
YAHTSEE_GAME_LOGIC_H	src/game_logic.h	/^#define YAHTSEE_GAME_LOGIC_H$/;"	d
YAHTSEE_GAME_STATE_H	src/game_state.h	/^#define YAHTSEE_GAME_STATE_H$/;"	d
YAHTSEE_INPUT_MANAGER_H	src/input_manager.h	/^#define YAHTSEE_INPUT_MANAGER_H$/;"	d
YAHTSEE_MATCHMAKER_H	src/matchmaker.h	/^#define YAHTSEE_MATCHMAKER_H$/;"	d
YAHTSEE_MULTIPLAYER_H	src/multiplayer.h	/^#define YAHTSEE_MULTIPLAYER_H$/;"	d
YAHTSEE_PLAYER_H	src/player.h	/^#define YAHTSEE_PLAYER_H$/;"	d
YAHTSEE_PLAYER_MANAGER_H	src/player_manager.h	/^#define YAHTSEE_PLAYER_MANAGER_H$/;"	d
YAHTSEE_RENDERABLE_H	src/renderable.h	/^#define YAHTSEE_RENDERABLE_H$/;"	d
YAHTSEE_STATE_MANAGER_H	src/state_manager.h	/^#define YAHTSEE_STATE_MANAGER_H$/;"	d
YAHTSEE_UI_H	src/game_ui.h	/^#define YAHTSEE_UI_H$/;"	d
YAHTSEE_UPDATABLE_H	src/updatable.h	/^#define YAHTSEE_UPDATABLE_H$/;"	d
Yahtsee	yahtsee.rb	/^class Yahtsee < Formula$/;"	c
_ALERT_BOX_H_	src/orig/alert_box.h	/^#define _ALERT_BOX_H_$/;"	d
_CACA_GAME_H_	src/orig/caca_game.h	/^#define _CACA_GAME_H_$/;"	d
_YAHTSEE_LOG_H_	src/orig/log.h	/^#define _YAHTSEE_LOG_H_$/;"	d
_YAHT_GAME_H_	src/orig/game.h	/^#define _YAHT_GAME_H_$/;"	d
action_add_network_player	src/orig/game_actions.cpp	/^void game::action_add_network_player(const shared_ptr<player> &player)$/;"	f	class:game
action_disconnect	src/orig/game_actions.cpp	/^void game::action_disconnect()$/;"	f	class:game
action_finish_turn	src/orig/game_actions.cpp	/^void game::action_finish_turn()$/;"	f	class:game
action_game_over	src/orig/game_actions.cpp	/^void game::action_game_over()$/;"	f	class:game
action_host_game	src/orig/game_actions.cpp	/^void game::action_host_game()$/;"	f	class:game
action_join_game	src/orig/game_actions.cpp	/^void game::action_join_game()$/;"	f	class:game
action_join_online_game	src/orig/game_actions.cpp	/^void game::action_join_online_game()$/;"	f	class:game
action_joined_game	src/orig/game_actions.cpp	/^void game::action_joined_game()$/;"	f	class:game
action_lower_score	src/orig/game_actions.cpp	/^void game::action_lower_score(shared_ptr<yaht::player> player, yaht::scoresheet::type type)$/;"	f	class:game
action_network_player_finished	src/orig/game_actions.cpp	/^void game::action_network_player_finished(const shared_ptr<player> &p)$/;"	f	class:game
action_network_player_joined	src/orig/game_actions.cpp	/^void game::action_network_player_joined(const shared_ptr<player> &p)$/;"	f	class:game
action_network_player_left	src/orig/game_actions.cpp	/^void game::action_network_player_left(const shared_ptr<player> &p)$/;"	f	class:game
action_remove_network_player	src/orig/game_actions.cpp	/^void game::action_remove_network_player(connection *c)$/;"	f	class:game
action_roll_dice	src/orig/game_actions.cpp	/^void game::action_roll_dice()$/;"	f	class:game
action_score	src/orig/game_actions.cpp	/^void game::action_score(shared_ptr<yaht::player> player, int n)$/;"	f	class:game
action_score_best	src/orig/game_actions.cpp	/^void game::action_score_best(shared_ptr<yaht::player> player)$/;"	f	class:game
action_select_die	src/orig/game_actions.cpp	/^void game::action_select_die(shared_ptr<yaht::player> player, int d)$/;"	f	class:game
add	src/player_manager.cpp	/^    PlayerManager& PlayerManager::add(const std::shared_ptr<Player> &value) {$/;"	f	class:yahtsee::PlayerManager
add_event	src/orig/caca_game.cpp	/^void caca_game::add_event(const function<void()> callback)$/;"	f	class:caca_game
add_event	src/orig/caca_game.cpp	/^void caca_game::add_event(unsigned millis, const function<void()> callback)$/;"	f	class:caca_game
add_network_player	src/event_manager.cpp	/^    void EventManager::add_network_player(const std::shared_ptr<Player> &player)$/;"	f	class:yahtsee::EventManager
add_option	src/game_ui.cpp	/^    Dialog &Dialog::add_option(const std::string &key, const std::shared_ptr<Option> &option) {$/;"	f	class:yahtsee::Dialog
add_option	src/game_ui.cpp	/^    Dialog &Dialog::add_option(const std::string &key, const std::string &description, const Option::Callback &callback) {$/;"	f	class:yahtsee::Dialog
add_option	src/game_ui.cpp	/^    Menu &Menu::add_option(const std::string &key, const std::shared_ptr<Option> &option) {$/;"	f	class:yahtsee::Menu
add_option	src/game_ui.cpp	/^    Menu &Menu::add_option(const std::string &key, const std::string &description, const Option::Callback &callback) {$/;"	f	class:yahtsee::Menu
add_player	src/orig/game.cpp	/^void game::add_player(const shared_ptr<player> &p)$/;"	f	class:game
add_to_buffer	src/orig/caca_game.cpp	/^size_t caca_game::add_to_buffer(int ch)$/;"	f	class:caca_game
alert_box	src/orig/alert_box.cpp	/^alert_box::alert_box(caca_game *game, dimensional *dimensions, function<void(const alert_box &)> callback) :$/;"	f	class:alert_box
alert_box	src/orig/alert_box.h	/^class alert_box$/;"	c
alert_boxes_	src/orig/caca_game.h	/^    stack<alert_box> alert_boxes_;$/;"	m	class:caca_game
alert_dimensions	src/orig/game.cpp	/^game::alert_dimensions::alert_dimensions(game *game) : game_(game)$/;"	f	class:game::alert_dimensions
alert_dimensions	src/orig/game.h	/^    class alert_dimensions : public dimensional$/;"	c	class:game
alertsMutex_	src/orig/caca_game.h	/^    recursive_mutex alertsMutex_;$/;"	m	class:caca_game
alive	src/orig/game.cpp	/^bool game::alive() const$/;"	f	class:game
all	src/player_manager.cpp	/^    const PlayerManager::PlayerList &PlayerManager::all() const {$/;"	f	class:yahtsee::PlayerManager
already_scored	src/curses_ui.cpp	/^        void Ui::already_scored()$/;"	f	class:yahtsee::curses::Ui
api_	src/matchmaker.h	/^        coda::net::http::client api_;$/;"	m	class:yahtsee::Matchmaker
ask_name	src/curses_ui.cpp	/^        void Ui::ask_name()$/;"	f	class:yahtsee::curses::Ui
ask_number_of_players	src/curses_ui.cpp	/^        void Ui::ask_number_of_players()$/;"	f	class:yahtsee::curses::Ui
backgroundThread_	src/client.h	/^        std::shared_ptr<std::thread> backgroundThread_;$/;"	m	class:yahtsee::Client
begin	src/game.cpp	/^    Game &Game::begin() {$/;"	f	class:yahtsee::Game
bufSize	src/orig/game.h	/^    size_t bufSize[BUF_MAX];$/;"	m	class:game
buf_	src/orig/caca_game.h	/^    ostringstream buf_;$/;"	m	class:caca_game
bufs	src/orig/game.h	/^    void *bufs[BUF_MAX];$/;"	m	class:game
caca_game	src/orig/caca_game.cpp	/^caca_game::caca_game() : canvas_(NULL), display_(NULL), frame_(1)$/;"	f	class:caca_game
caca_game	src/orig/caca_game.h	/^class caca_game$/;"	c
callback	src/game_ui.h	/^            Callback callback() const { return callback_; }$/;"	f	class:yahtsee::impl::Option
callback_	src/game_ui.h	/^            Callback callback_;$/;"	m	class:yahtsee::impl::Option
callback_	src/orig/alert_box.h	/^    std::function<void(const alert_box &)> callback_;$/;"	m	class:alert_box
callback_	src/orig/caca_game.h	/^    function<void()> callback_;$/;"	m	class:game_event
canvas_	src/orig/caca_game.h	/^    caca_canvas_t *canvas_;$/;"	m	class:caca_game
center	src/orig/alert_box.cpp	/^void alert_box::center(const string &text) const$/;"	f	class:alert_box
center_x	src/orig/alert_box.cpp	/^int alert_box::center_x() const$/;"	f	class:alert_box
center_x	src/orig/alert_box.cpp	/^int alert_box::center_x(const string &str) const$/;"	f	class:alert_box
center_x	src/orig/alert_box.cpp	/^void alert_box::center_x(int y, const string &text) const$/;"	f	class:alert_box
center_y	src/orig/alert_box.cpp	/^int alert_box::center_y() const$/;"	f	class:alert_box
clear	src/orig/caca_game.cpp	/^void game_event::clear()$/;"	f	class:game_event
clear_alerts	src/orig/caca_game.cpp	/^void caca_game::clear_alerts()$/;"	f	class:caca_game
clear_all_events	src/orig/caca_game.cpp	/^void caca_game::clear_all_events()$/;"	f	class:caca_game
clear_buffer	src/orig/caca_game.cpp	/^void caca_game::clear_buffer()$/;"	f	class:caca_game
clear_display	src/orig/caca_game.cpp	/^void caca_game::clear_display()$/;"	f	class:caca_game
clear_states	src/orig/game.cpp	/^void game::clear_states()$/;"	f	class:game
clear_timed_events	src/orig/caca_game.cpp	/^void caca_game::clear_timed_events()$/;"	f	class:caca_game
clientFactory_	src/matchmaker.h	/^        std::shared_ptr<ConnectionFactory> clientFactory_;$/;"	m	class:yahtsee::Matchmaker
client_	src/matchmaker.h	/^        Client client_;$/;"	m	class:yahtsee::Matchmaker
client_waiting_to_start	src/curses_ui.cpp	/^        void Ui::client_waiting_to_start()$/;"	f	class:yahtsee::curses::Ui
config_format	src/orig/game.h	/^    typedef nlohmann::json config_format;$/;"	t	class:game
confirm_quit	src/curses_ui.cpp	/^        void Ui::confirm_quit()$/;"	f	class:yahtsee::curses::Ui
connection	src/player.cpp	/^    Connection *Player::connection() const {$/;"	f	class:yahtsee::Player
connection_	src/player.h	/^        Connection *connection_;$/;"	m	class:yahtsee::Player
connections_	src/connection_factory.h	/^        std::vector<std::shared_ptr<Connection>> connections_;$/;"	m	class:yahtsee::ConnectionFactory
create_socket	src/connection_factory.cpp	/^    std::shared_ptr<coda::net::buffered_socket> ConnectionFactory::create_socket(const server_type &server,$/;"	f	class:yahtsee::ConnectionFactory
currentPlayer_	src/orig/game.h	/^    int currentPlayer_;$/;"	m	class:game
current_player	src/orig/game.cpp	/^shared_ptr<player> game::current_player() const$/;"	f	class:game
curses	src/curses_ui.cpp	/^    namespace curses {$/;"	n	namespace:yahtsee	file:
description	src/game_ui.h	/^            std::string description() const { return description_; }$/;"	f	class:yahtsee::impl::Option
description_	src/game_ui.h	/^            std::string description_;$/;"	m	class:yahtsee::impl::Option
dice	src/curses_ui.cpp	/^        void Ui::dice(const std::shared_ptr<Player>& player, int x, int y)$/;"	f	class:yahtsee::curses::Ui
dice_roll	src/curses_ui.cpp	/^        void Ui::dice_roll()$/;"	f	class:yahtsee::curses::Ui
dimensional	src/orig/alert_box.h	/^class dimensional$/;"	c
dimensions_	src/orig/alert_box.h	/^    dimensional *dimensions_;$/;"	m	class:alert_box
disconnect	src/event_manager.cpp	/^    void EventManager::disconnect()$/;"	f	class:yahtsee::EventManager
display	src/orig/alert_box.cpp	/^void alert_box::display()$/;"	f	class:alert_box
displayMode_	src/orig/game.h	/^    display_mode displayMode_;$/;"	m	class:game
display_	src/orig/caca_game.h	/^    caca_display_t *display_;$/;"	m	class:caca_game
display_alert	src/orig/caca_game.cpp	/^void caca_game::display_alert(dimensional *dimensions, const function<void(const alert_box &)> callback)$/;"	f	class:caca_game
display_alert	src/orig/game.cpp	/^void game::display_alert(const function<void(const alert_box &a)> funk)$/;"	f	class:game
display_alert	src/orig/game.cpp	/^void game::display_alert(const string &message, const function<void(const alert_box &a)> funk)$/;"	f	class:game
display_alert	src/orig/game.cpp	/^void game::display_alert(const vector<string> &messages, const std::function<void(const alert_box &a)> funk)$/;"	f	class:game
display_alert	src/orig/game.cpp	/^void game::display_alert(int millis, const function<void(const alert_box &)> funk, const function<void()> pop)$/;"	f	class:game
display_alert	src/orig/game.cpp	/^void game::display_alert(int millis, const string &message, const function<void(const alert_box &a)> funk,$/;"	f	class:game
display_alert	src/orig/game.cpp	/^void game::display_alert(int millis, const vector<string> &messages, const function<void(const alert_box &a)> funk,$/;"	f	class:game
display_already_scored	src/orig/game_display.cpp	/^void game::display_already_scored()$/;"	f	class:game
display_ask_name	src/orig/game_display.cpp	/^void game::display_ask_name()$/;"	f	class:game
display_ask_number_of_players	src/orig/game_display.cpp	/^void game::display_ask_number_of_players()$/;"	f	class:game
display_client_waiting_to_start	src/orig/game_display.cpp	/^void game::display_client_waiting_to_start()$/;"	f	class:game
display_confirm_quit	src/orig/game_display.cpp	/^void game::display_confirm_quit()$/;"	f	class:game
display_dice	src/orig/game_display.cpp	/^void game::display_dice(shared_ptr<player> player, int x, int y)$/;"	f	class:game
display_dice_roll	src/orig/game_display.cpp	/^void game::display_dice_roll()$/;"	f	class:game
display_game_menu	src/orig/game_display.cpp	/^void game::display_game_menu()$/;"	f	class:game
display_help	src/orig/game_display.cpp	/^void game::display_help()$/;"	f	class:game
display_hosting_game	src/orig/game_display.cpp	/^void game::display_hosting_game()$/;"	f	class:game
display_lower_scores	src/orig/game_display.cpp	/^void game::display_lower_scores(int color, const yaht::scoresheet &score, yaht::scoresheet::value_type lower_score_total, int x, int y)$/;"	f	class:game
display_mode	src/orig/game.h	/^typedef enum { HORIZONTAL, VERTICAL, MINIMAL } display_mode;$/;"	t	typeref:enum:__anon1
display_multiplayer_join	src/orig/game_display.cpp	/^void game::display_multiplayer_join()$/;"	f	class:game
display_multiplayer_join_game	src/orig/game_display.cpp	/^void game::display_multiplayer_join_game()$/;"	f	class:game
display_multiplayer_menu	src/orig/game_display.cpp	/^void game::display_multiplayer_menu()$/;"	f	class:game
display_player_scores	src/orig/game_display.cpp	/^void game::display_player_scores()$/;"	f	class:game
display_upper_scores	src/orig/game_display.cpp	/^yaht::scoresheet::value_type game::display_upper_scores(int color, const yaht::scoresheet &score, int x, int y)$/;"	f	class:game
display_waiting_for_connections	src/orig/game_display.cpp	/^void game::display_waiting_for_connections()$/;"	f	class:game
displayed_alert	src/orig/caca_game.cpp	/^const alert_box &caca_game::displayed_alert() const$/;"	f	class:caca_game
end	src/game.cpp	/^    Game &Game::end() {$/;"	f	class:yahtsee::Game
event_	src/orig/caca_game.h	/^    caca_event_t event_;$/;"	m	class:caca_game
events	src/state_manager.cpp	/^    EventManager *StateManager::events() { return &events_; }$/;"	f	class:yahtsee::StateManager
eventsMutex_	src/orig/caca_game.h	/^    recursive_mutex eventsMutex_;$/;"	m	class:caca_game
events_	src/orig/caca_game.h	/^    vector<game_event> events_;$/;"	m	class:caca_game
events_	src/state_manager.h	/^        EventManager events_;$/;"	m	class:yahtsee::StateManager
exit_game	src/orig/game.cpp	/^void game::exit_game()$/;"	f	class:game
exit_multiplayer	src/orig/game.cpp	/^void game::exit_multiplayer()$/;"	f	class:game
factory	src/curses_ui.cpp	/^    namespace factory {$/;"	n	namespace:yahtsee	file:
factory	src/game_ui.cpp	/^    namespace factory {$/;"	n	namespace:yahtsee	file:
factory	src/game_ui.h	/^    namespace factory {$/;"	n	namespace:yahtsee
find	src/player_manager.cpp	/^    std::shared_ptr<Player> PlayerManager::find(const std::function<bool(const std::shared_ptr<Player> &p)> &delegate) const {$/;"	f	class:yahtsee::PlayerManager
find_by_id	src/player_manager.cpp	/^    std::shared_ptr<Player> PlayerManager::find_by_id(const std::string &id) const$/;"	f	class:yahtsee::PlayerManager
find_player_by_id	src/orig/game.cpp	/^shared_ptr<player> game::find_player_by_id(const string &id) const$/;"	f	class:game
find_state	src/orig/game.cpp	/^const game::game_state *game::find_state(state_handler value)$/;"	f	class:game
finish_turn	src/event_manager.cpp	/^    void EventManager::finish_turn()$/;"	f	class:yahtsee::EventManager
flags	src/orig/game.h	/^        int flags;$/;"	m	struct:game::__anon3
flags_	src/game_logic.h	/^        int flags_;$/;"	m	class:yahtsee::GameLogic
flags_	src/multiplayer.h	/^        int flags_;$/;"	m	class:yahtsee::Multiplayer
flags_	src/orig/caca_game.h	/^    int flags_;$/;"	m	class:caca_game
flags_	src/orig/game.h	/^    int flags_;$/;"	m	class:game
flash	src/curses_ui.cpp	/^        void Ui::flash(const Dialog &dialog, const std::function<void()> &onFinish) {}$/;"	f	class:yahtsee::curses::Ui
for_connections	src/connection_factory.cpp	/^    void ConnectionFactory::for_connections(ConnectionPtr funk) {$/;"	f	class:yahtsee::ConnectionFactory
for_players	src/orig/game.cpp	/^void game::for_players(std::function<bool(const shared_ptr<player> &p)> funk)$/;"	f	class:game
frame_	src/orig/caca_game.h	/^    int frame_;$/;"	m	class:caca_game
frames	src/orig/caca_game.cpp	/^int caca_game::frames() const$/;"	f	class:caca_game
from_packet	src/player.cpp	/^    void Player::from_packet(const Packet &packet) {$/;"	f	class:yahtsee::Player
game	src/orig/game.cpp	/^game::game() : displayMode_(MINIMAL), numPlayers_(0), matchmaker_(this), flags_(0), currentPlayer_(0)$/;"	f	class:game
game	src/orig/game.h	/^class game : public caca_game$/;"	c
gameId_	src/matchmaker.h	/^        std::string gameId_;$/;"	m	class:yahtsee::Matchmaker
game_	src/orig/alert_box.h	/^    caca_game *game_;$/;"	m	class:alert_box
game_	src/orig/game.h	/^        game *game_;$/;"	m	class:game::alert_dimensions
game_event	src/orig/caca_game.cpp	/^game_event::game_event(const function<void()> callback) : millis_(0), callback_(callback), ready_(true)$/;"	f	class:game_event
game_event	src/orig/caca_game.cpp	/^game_event::game_event(game_event &&other)$/;"	f	class:game_event
game_event	src/orig/caca_game.cpp	/^game_event::game_event(unsigned millis, const function<void()> callback) : millis_(millis), callback_(callback), ready_(false)$/;"	f	class:game_event
game_event	src/orig/caca_game.h	/^class game_event$/;"	c
game_over	src/event_manager.cpp	/^    void EventManager::game_over()$/;"	f	class:yahtsee::EventManager
game_state	src/orig/game.h	/^    } game_state;$/;"	t	class:game	typeref:struct:game::__anon3
generate	src/player.cpp	/^    die::value_type Player::Engine::generate(die::value_type from, die::value_type to) {$/;"	f	class:yahtsee::Player::Engine
get	src/input_manager.cpp	/^        int get() const {$/;"	f	class:yahtsee::CursesInput
get	src/input_manager.cpp	/^    int InputManager::get() const {$/;"	f	class:yahtsee::InputManager
get_buffer	src/orig/caca_game.cpp	/^string caca_game::get_buffer()$/;"	f	class:caca_game
get_cursor_x	src/orig/caca_game.cpp	/^int caca_game::get_cursor_x() const$/;"	f	class:caca_game
get_cursor_y	src/orig/caca_game.cpp	/^int caca_game::get_cursor_y() const$/;"	f	class:caca_game
get_player	src/orig/game.cpp	/^shared_ptr<player> game::get_player(size_t index) const$/;"	f	class:game
h	src/orig/game.cpp	/^int game::alert_dimensions::h() const$/;"	f	class:game::alert_dimensions
handle	src/connection_state.cpp	/^    void ConnectionState::handle(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_connection_init	src/connection_state.cpp	/^    void ConnectionState::handle_connection_init(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_connection_init	src/orig/connection_state.cpp	/^void connection::handle_connection_init(const json &packet)$/;"	f	class:connection
handle_game_start	src/connection_state.cpp	/^    void ConnectionState::handle_game_start(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_game_start	src/orig/connection_state.cpp	/^void connection::handle_game_start(const json &packet)$/;"	f	class:connection
handle_player_joined	src/connection_state.cpp	/^    void ConnectionState::handle_player_joined(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_player_joined	src/orig/connection_state.cpp	/^void connection::handle_player_joined(const packet_format &packet)$/;"	f	class:connection
handle_player_left	src/connection_state.cpp	/^    void ConnectionState::handle_player_left(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_player_left	src/orig/connection_state.cpp	/^void connection::handle_player_left(const packet_format &packet)$/;"	f	class:connection
handle_player_roll	src/connection_state.cpp	/^    void ConnectionState::handle_player_roll(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_player_roll	src/orig/connection_state.cpp	/^void connection::handle_player_roll(const packet_format &packet)$/;"	f	class:connection
handle_player_turn_finished	src/connection_state.cpp	/^    void ConnectionState::handle_player_turn_finished(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_player_turn_finished	src/orig/connection_state.cpp	/^void connection::handle_player_turn_finished(const packet_format &packet)$/;"	f	class:connection
handle_remote_connection_init	src/connection_state.cpp	/^    void ConnectionState::handle_remote_connection_init(Connection *conn, const Packet &packet) {$/;"	f	class:yahtsee::ConnectionState
handle_remote_connection_init	src/orig/connection_state.cpp	/^void connection::handle_remote_connection_init(const json &packet)$/;"	f	class:connection
handle_winch	src/curses_ui.cpp	/^        void handle_winch(int sig){$/;"	f	namespace:yahtsee::curses
has_alert	src/orig/caca_game.cpp	/^bool caca_game::has_alert() const$/;"	f	class:caca_game
has_registry	src/multiplayer.cpp	/^    bool Multiplayer::has_registry() const {$/;"	f	class:yahtsee::Multiplayer
height	src/orig/alert_box.cpp	/^int alert_box::height() const$/;"	f	class:alert_box
help	src/curses_ui.cpp	/^        void Ui::help()$/;"	f	class:yahtsee::curses::Ui
host	src/matchmaker.cpp	/^    bool Matchmaker::host(const Config &settings, bool registerOnline, bool portForwarding, string *error, int port) {$/;"	f	class:yahtsee::Matchmaker
host_game	src/event_manager.cpp	/^    void EventManager::host_game()$/;"	f	class:yahtsee::EventManager
hosting_game	src/curses_ui.cpp	/^        void Ui::hosting_game()$/;"	f	class:yahtsee::curses::Ui
id	src/player.cpp	/^    string Player::id() const {$/;"	f	class:yahtsee::Player
id_	src/player.h	/^        std::string id_;$/;"	m	class:yahtsee::Player
impl	src/game_ui.h	/^    namespace impl {$/;"	n	namespace:yahtsee
init	src/curses_ui.cpp	/^            void init() {$/;"	f	class:yahtsee::curses::Menu	file:
init_canvas	src/orig/game.cpp	/^void game::init_canvas(caca_canvas_t *canvas)$/;"	f	class:game
init_playing	src/orig/game.cpp	/^void game::init_playing()$/;"	f	class:game
input	src/state_manager.cpp	/^    InputManager *StateManager::input() { return &input_; }$/;"	f	class:yahtsee::StateManager
input_	src/curses_ui.cpp	/^            InputManager *input_;$/;"	m	class:yahtsee::curses::Menu	file:
input_	src/input_manager.h	/^        std::unique_ptr<Inputer> input_;$/;"	m	class:yahtsee::InputManager
input_	src/state_manager.h	/^        InputManager input_;$/;"	m	class:yahtsee::StateManager
install	yahtsee.rb	/^  def install$/;"	f	class:Yahtsee
is_auto_port_forward	src/orig/game.cpp	/^bool game::is_auto_port_forward() const$/;"	f	class:game
is_finished	src/state_manager.cpp	/^    bool StateManager::is_finished() const {$/;"	f	class:yahtsee::StateManager
is_hosting	src/multiplayer.cpp	/^    bool Multiplayer::is_hosting() const {$/;"	f	class:yahtsee::Multiplayer
is_matchmaking	src/multiplayer.cpp	/^    bool Multiplayer::is_matchmaking() const {$/;"	f	class:yahtsee::Multiplayer
is_online	src/orig/game.cpp	/^bool game::is_online() const$/;"	f	class:game
is_online_available	src/orig/game.cpp	/^bool game::is_online_available() const$/;"	f	class:game
is_playing	src/orig/game.cpp	/^bool game::is_playing()$/;"	f	class:game
is_single_player	src/player_manager.cpp	/^    bool PlayerManager::is_single_player() const {$/;"	f	class:yahtsee::PlayerManager
is_state	src/orig/game.cpp	/^bool game::is_state(state_handler value)$/;"	f	class:game
items_	src/curses_ui.cpp	/^            ITEM **items_;$/;"	m	class:yahtsee::curses::Menu	file:
join_best_game	src/matchmaker.cpp	/^    bool Matchmaker::join_best_game(string *error) {$/;"	f	class:yahtsee::Matchmaker
join_game	src/event_manager.cpp	/^    void EventManager::join_game()$/;"	f	class:yahtsee::EventManager
join_game	src/matchmaker.cpp	/^    bool Matchmaker::join_game(const std::string &host, int port, string *error) {$/;"	f	class:yahtsee::Matchmaker
join_online_game	src/event_manager.cpp	/^    void EventManager::join_online_game()$/;"	f	class:yahtsee::EventManager
joined_game	src/event_manager.cpp	/^    void EventManager::joined_game()$/;"	f	class:yahtsee::EventManager
joining_game	src/curses_ui.cpp	/^        void Ui::joining_game() {$/;"	f	class:yahtsee::curses::Ui
load	src/game.cpp	/^    Game &Game::load() {$/;"	f	class:yahtsee::Game
load_buf	src/orig/game.cpp	/^void game::load_buf(const char *fileName, int index)$/;"	f	class:game
load_settings	src/orig/game.cpp	/^void game::load_settings(char *exe)$/;"	f	class:game
log_file	src/orig/log.cpp	/^ostream log_file()$/;"	f
log_trace	src/orig/log.h	/^#define log_trace(/;"	d
log_warn	src/orig/log.h	/^#define log_warn(/;"	d
logic	src/state_manager.cpp	/^    GameLogic *StateManager::logic() { return &logic_; }$/;"	f	class:yahtsee::StateManager
logic_	src/state_manager.h	/^        GameLogic logic_;$/;"	m	class:yahtsee::StateManager
lower_score	src/event_manager.cpp	/^    void EventManager::lower_score(const std::shared_ptr<Player> &player, yaht::scoresheet::type type)$/;"	f	class:yahtsee::EventManager
lower_scores	src/curses_ui.cpp	/^        void Ui::lower_scores(int color, const yaht::scoresheet &score, yaht::scoresheet::value_type lower_score_total, int x, int y)$/;"	f	class:yahtsee::curses::Ui
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	tests/main.test.cpp	/^int main()$/;"	f
matchmaker_	src/orig/game.h	/^    matchmaker matchmaker_;$/;"	m	class:game
menu	src/curses_ui.cpp	/^        std::shared_ptr<yahtsee::Menu> Ui::menu() {$/;"	f	class:yahtsee::curses::Ui
menu_	src/curses_ui.cpp	/^            MENU *menu_;$/;"	m	class:yahtsee::curses::Menu	file:
menu_	src/game_state.h	/^        std::shared_ptr<Menu> menu_;$/;"	m	class:yahtsee::WelcomeState
message_	src/game_ui.h	/^        std::string message_;$/;"	m	class:yahtsee::Dialog
millis	src/orig/caca_game.cpp	/^unsigned game_event::millis() const$/;"	f	class:game_event
millis_	src/orig/caca_game.h	/^    unsigned millis_;$/;"	m	class:game_event
minimalLower_	src/orig/game.h	/^    bool minimalLower_;$/;"	m	class:game
modal	src/curses_ui.cpp	/^        void Ui::modal(const Dialog &dialog) {}$/;"	f	class:yahtsee::curses::Ui
multiplayer_join	src/curses_ui.cpp	/^        void Ui::multiplayer_join()$/;"	f	class:yahtsee::curses::Ui
multiplayer_join_game	src/curses_ui.cpp	/^        void Ui::multiplayer_join_game()$/;"	f	class:yahtsee::curses::Ui
multiplayer_menu	src/curses_ui.cpp	/^        void Ui::multiplayer_menu()$/;"	f	class:yahtsee::curses::Ui
mutex_	src/orig/caca_game.h	/^    recursive_mutex mutex_;$/;"	m	class:caca_game
mutex_	src/orig/game.h	/^    recursive_mutex mutex_;$/;"	m	class:game
name	src/orig/game.h	/^        const char *name;$/;"	m	struct:game::__anon3
name	src/player.cpp	/^    string Player::name() const {$/;"	f	class:yahtsee::Player
name_	src/player.h	/^        std::string name_;$/;"	m	class:yahtsee::Player
network_player_finished	src/event_manager.cpp	/^    void EventManager::network_player_finished(const std::shared_ptr<Player> &p)$/;"	f	class:yahtsee::EventManager
network_player_joined	src/event_manager.cpp	/^    void EventManager::network_player_joined(const std::shared_ptr<Player> &p)$/;"	f	class:yahtsee::EventManager
network_player_left	src/event_manager.cpp	/^    void EventManager::network_player_left(const std::shared_ptr<Player> &p)$/;"	f	class:yahtsee::EventManager
new_curses_ui	src/curses_ui.cpp	/^        std::shared_ptr<GameUi> new_curses_ui(StateManager *state) {$/;"	f	namespace:yahtsee::factory
new_frame	src/orig/caca_game.cpp	/^void caca_game::new_frame()$/;"	f	class:caca_game
new_imgui_ui	src/game_ui.cpp	/^        std::shared_ptr<GameUi> new_imgui_ui(StateManager *state) {$/;"	f	namespace:yahtsee::factory
nextRoll_	src/player.h	/^            std::queue<coda::die::value_type> nextRoll_;$/;"	m	class:yahtsee::Player::Engine
next_player	src/orig/game.cpp	/^void game::next_player()$/;"	f	class:game
next_turn	src/player_manager.cpp	/^    std::shared_ptr<Player> PlayerManager::next_turn() {$/;"	f	class:yahtsee::PlayerManager
noexcept	src/game_logic.h	/^        bool is_thinking() const noexcept;$/;"	m	class:yahtsee::GameLogic
noexcept	src/game_logic.h	/^        void stop_thinking() noexcept;$/;"	m	class:yahtsee::GameLogic
notify_game_start	src/matchmaker.cpp	/^    void Matchmaker::notify_game_start(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Matchmaker
notify_player_joined	src/matchmaker.cpp	/^    void Matchmaker::notify_player_joined(const shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Matchmaker
notify_player_left	src/matchmaker.cpp	/^    void Matchmaker::notify_player_left(const shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Matchmaker
notify_player_roll	src/matchmaker.cpp	/^    void Matchmaker::notify_player_roll(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Matchmaker
notify_player_turn_finished	src/matchmaker.cpp	/^    void Matchmaker::notify_player_turn_finished(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Matchmaker
numPlayers_	src/orig/game.h	/^    unsigned numPlayers_;$/;"	m	class:game
on	src/game.cpp	/^    bool Game::on() const {$/;"	f	class:yahtsee::Game
on_close	src/client.cpp	/^    void Client::on_close() {$/;"	f	class:yahtsee::Client
on_close	src/connection.cpp	/^    void Connection::on_close() {$/;"	f	class:yahtsee::Connection
on_connect	src/client.cpp	/^    void Client::on_connect(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::Client
on_connect	src/connection.cpp	/^    void Connection::on_connect(const std::vector<Player> &players) {$/;"	f	class:yahtsee::Connection
on_did_read	src/client.cpp	/^    void Client::on_did_read() {$/;"	f	class:yahtsee::Client
on_did_read	src/connection.cpp	/^    void Connection::on_did_read() {$/;"	f	class:yahtsee::Connection
on_did_write	src/client.cpp	/^    void Client::on_did_write() {$/;"	f	class:yahtsee::Client
on_did_write	src/connection.cpp	/^    void Connection::on_did_write() {$/;"	f	class:yahtsee::Connection
on_display	src/orig/game.cpp	/^void game::on_display()$/;"	f	class:game
on_display	src/orig/game.h	/^        void (game::*on_display)();$/;"	m	struct:game::__anon3
on_execute	src/orig/game.h	/^        void (game::*on_execute)(int);$/;"	m	struct:game::__anon3
on_exit	src/orig/game.h	/^        void (game::*on_exit)();$/;"	m	struct:game::__anon3
on_init	src/orig/game.h	/^        void (game::*on_init)();$/;"	m	struct:game::__anon3
on_key_press	src/orig/game.cpp	/^void game::on_key_press(int input)$/;"	f	class:game
on_quit	src/orig/game.cpp	/^void game::on_quit()$/;"	f	class:game
on_resize	src/orig/game.cpp	/^void game::on_resize(int width, int height)$/;"	f	class:game
on_start	src/orig/game.cpp	/^void game::on_start()$/;"	f	class:game
on_will_read	src/client.cpp	/^    void Client::on_will_read() {$/;"	f	class:yahtsee::Client
on_will_read	src/connection.cpp	/^    void Connection::on_will_read() {$/;"	f	class:yahtsee::Connection
on_will_write	src/client.cpp	/^    void Client::on_will_write() {$/;"	f	class:yahtsee::Client
on_will_write	src/connection.cpp	/^    void Connection::on_will_write() {$/;"	f	class:yahtsee::Connection
online	src/state_manager.cpp	/^    Multiplayer *StateManager::online() { return &online_; }$/;"	f	class:yahtsee::StateManager
online_	src/state_manager.h	/^        Multiplayer online_;$/;"	m	class:yahtsee::StateManager
operator =	src/client.cpp	/^    Client &Client::operator=(Client &&other) {$/;"	f	class:yahtsee::Client
operator =	src/connection.cpp	/^    Connection &Connection::operator=(Connection &&other) {$/;"	f	class:yahtsee::Connection
operator =	src/matchmaker.cpp	/^    Matchmaker &Matchmaker::operator=(Matchmaker &&other) {$/;"	f	class:yahtsee::Matchmaker
operator =	src/orig/caca_game.cpp	/^game_event &game_event::operator=(game_event &&other)$/;"	f	class:game_event
operator =	src/player.cpp	/^    Player &Player::operator=(Player &&other) {$/;"	f	class:yahtsee::Player
operator =	src/player.cpp	/^    Player &Player::operator=(const Player &other) {$/;"	f	class:yahtsee::Player
operator ==	src/player.cpp	/^    bool Player::operator==(const Player &other) const {$/;"	f	class:yahtsee::Player
options_	src/game_ui.h	/^        std::unordered_map<std::string, std::shared_ptr<Option>> options_;$/;"	m	class:yahtsee::Dialog
options_	src/game_ui.h	/^        std::unordered_map<std::string, std::shared_ptr<Option>> options_;$/;"	m	class:yahtsee::Menu
other	src/client.h	/^        Client &operator=(const Client &other) = delete;$/;"	m	class:yahtsee::Client
other	src/client.h	/^        Client(const Client &other) = delete;$/;"	m	class:yahtsee::Client
other	src/connection.h	/^        Connection &operator=(const Connection &other) = delete;$/;"	m	class:yahtsee::Connection
other	src/connection.h	/^        Connection(const Connection &other) = delete;$/;"	m	class:yahtsee::Connection
owner_	src/game_ui.h	/^            T *owner_;$/;"	m	class:yahtsee::impl::Option
perform	src/orig/caca_game.cpp	/^void game_event::perform() const$/;"	f	class:game_event
playerEngine	src/player.cpp	/^    Player::Engine playerEngine;$/;"	m	namespace:yahtsee	file:
player_scores	src/curses_ui.cpp	/^        void Ui::player_scores()$/;"	f	class:yahtsee::curses::Ui
players	src/state_manager.cpp	/^    PlayerManager *StateManager::players() { return &players_; }$/;"	f	class:yahtsee::StateManager
players_	src/orig/game.h	/^    vector<shared_ptr<player>> players_;$/;"	m	class:game
players_	src/player_manager.h	/^        PlayerList players_;$/;"	m	class:yahtsee::PlayerManager
players_	src/state_manager.h	/^        PlayerManager players_;$/;"	m	class:yahtsee::StateManager
pop_alert	src/orig/caca_game.cpp	/^void caca_game::pop_alert()$/;"	f	class:caca_game
pop_alert	src/orig/caca_game.cpp	/^void caca_game::pop_alert(int millis, const std::function<void()> funk)$/;"	f	class:caca_game
pop_frame	src/orig/caca_game.cpp	/^void caca_game::pop_frame()$/;"	f	class:caca_game
pop_from_buffer	src/orig/caca_game.cpp	/^void caca_game::pop_from_buffer()$/;"	f	class:caca_game
pop_state	src/orig/game.cpp	/^void game::pop_state()$/;"	f	class:game
port	src/matchmaker.cpp	/^    int Matchmaker::port() const {$/;"	f	class:yahtsee::Matchmaker
port_forward	src/matchmaker.cpp	/^    void Matchmaker::port_forward(int port) const {$/;"	f	class:yahtsee::Matchmaker
print_in_middle	src/curses_ui.cpp	/^            void print_in_middle(WINDOW *win, int starty, int startx, int width, const char *string, chtype color)$/;"	f	class:yahtsee::curses::Menu	file:
put	src/orig/caca_game.cpp	/^void caca_game::put(int x, int y, const char *value)$/;"	f	class:caca_game
put	src/orig/caca_game.cpp	/^void caca_game::put(int x, int y, int value)$/;"	f	class:caca_game
put_color	src/orig/caca_game.cpp	/^void caca_game::put_color(int x, int y, int fg)$/;"	f	class:caca_game
ready	src/orig/caca_game.cpp	/^bool game_event::ready() const$/;"	f	class:game_event
ready_	src/orig/caca_game.h	/^    bool ready_;$/;"	m	class:game_event
register_with_service	src/matchmaker.cpp	/^    bool Matchmaker::register_with_service(const Config &settings, string *error, int port) {$/;"	f	class:yahtsee::Matchmaker
registryUrl_	src/multiplayer.h	/^        std::string registryUrl_;$/;"	m	class:yahtsee::Multiplayer
registry_url	src/multiplayer.cpp	/^    std::string Multiplayer::registry_url() const {$/;"	f	class:yahtsee::Multiplayer
remove	src/player_manager.cpp	/^    bool PlayerManager::remove(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::PlayerManager
remove_network_player	src/event_manager.cpp	/^    void EventManager::remove_network_player(Connection *c) {$/;"	f	class:yahtsee::EventManager
render	src/curses_ui.cpp	/^            void render() {$/;"	f	class:yahtsee::curses::Menu
render	src/curses_ui.cpp	/^        void Ui::render() {$/;"	f	class:yahtsee::curses::Ui
render	src/game.cpp	/^    Game &Game::render() {$/;"	f	class:yahtsee::Game
render	src/game_state.cpp	/^    void NewSinglePlayerState::render() {$/;"	f	class:yahtsee::NewSinglePlayerState
render	src/game_state.cpp	/^    void WelcomeState::render() {$/;"	f	class:yahtsee::WelcomeState
render	src/state_manager.cpp	/^    void StateManager::render() {$/;"	f	class:yahtsee::StateManager
reset	src/multiplayer.cpp	/^    void Multiplayer::reset() {$/;"	f	class:yahtsee::Multiplayer
reset	src/orig/caca_game.cpp	/^void caca_game::reset()$/;"	f	class:caca_game
reset	src/orig/game.cpp	/^void game::reset()$/;"	f	class:game
reset	src/player.cpp	/^    void Player::Engine::reset() {$/;"	f	class:yahtsee::Player::Engine
reset	src/player_manager.cpp	/^    void PlayerManager::reset() {$/;"	f	class:yahtsee::PlayerManager
reset	src/state_manager.cpp	/^    void StateManager::reset() {$/;"	f	class:yahtsee::StateManager
resource_file_name	src/orig/game.cpp	/^string game::resource_file_name(const string &path)$/;"	f	class:game
roll_dice	src/event_manager.cpp	/^    void EventManager::roll_dice()$/;"	f	class:yahtsee::EventManager
run	src/client.cpp	/^    void Client::run() {$/;"	f	class:yahtsee::Client
score	src/event_manager.cpp	/^    void EventManager::score(const std::shared_ptr<Player> &player, int n)$/;"	f	class:yahtsee::EventManager
score_best	src/event_manager.cpp	/^    void EventManager::score_best(const std::shared_ptr<Player> &player)$/;"	f	class:yahtsee::EventManager
select_die	src/event_manager.cpp	/^    void EventManager::select_die(const std::shared_ptr<Player> &player, int d)$/;"	f	class:yahtsee::EventManager
self	src/player_manager.cpp	/^    std::shared_ptr<Player> PlayerManager::self() const {$/;"	f	class:yahtsee::PlayerManager
send_network_message	src/matchmaker.cpp	/^    void Matchmaker::send_network_message(const string &value) {$/;"	f	class:yahtsee::Matchmaker
serverPort_	src/matchmaker.h	/^        int serverPort_;$/;"	m	class:yahtsee::Matchmaker
server_	src/matchmaker.h	/^        coda::net::async::server server_;$/;"	m	class:yahtsee::Matchmaker
set	src/state_manager.cpp	/^    void StateManager::set(const std::shared_ptr<GameState> &value) {$/;"	f	class:yahtsee::StateManager
set_api_keys	src/matchmaker.cpp	/^    void Matchmaker::set_api_keys(const string &appId, const string &appToken) {$/;"	f	class:yahtsee::Matchmaker
set_color	src/orig/caca_game.cpp	/^void caca_game::set_color(int fg)$/;"	f	class:caca_game
set_current_player	src/orig/game.cpp	/^void game::set_current_player(const shared_ptr<player> &p)$/;"	f	class:game
set_cursor	src/orig/caca_game.cpp	/^void caca_game::set_cursor(int x, int y)$/;"	f	class:caca_game
set_display_mode	src/orig/game.cpp	/^void game::set_display_mode(display_mode mode)$/;"	f	class:game
set_needs_clear	src/orig/caca_game.cpp	/^void caca_game::set_needs_clear()$/;"	f	class:caca_game
set_needs_display	src/orig/caca_game.cpp	/^void caca_game::set_needs_display()$/;"	f	class:caca_game
set_needs_refresh	src/curses_ui.cpp	/^        void Ui::set_needs_refresh() {$/;"	f	class:yahtsee::curses::Ui
set_next_roll	src/player.cpp	/^    void Player::Engine::set_next_roll(const queue<die::value_type> &roll) {$/;"	f	class:yahtsee::Player::Engine
set_registry_url	src/multiplayer.cpp	/^    Multiplayer& Multiplayer::set_registry_url(const std::string &value) {$/;"	f	class:yahtsee::Multiplayer
set_state	src/orig/game.cpp	/^void game::set_state(state_handler value)$/;"	f	class:game
set_turn	src/player_manager.cpp	/^    PlayerManager &PlayerManager::set_turn(const std::shared_ptr<Player> &player) {$/;"	f	class:yahtsee::PlayerManager
settings	src/game_logic.cpp	/^    Settings &GameLogic::settings() {$/;"	f	class:yahtsee::GameLogic
settings	src/orig/game.cpp	/^const game::config_format *game::settings() const$/;"	f	class:game
settings_	src/game_logic.h	/^        Settings settings_;$/;"	m	class:yahtsee::GameLogic
settings_	src/orig/game.h	/^    config_format settings_;$/;"	m	class:game
show	src/curses_ui.cpp	/^        void Ui::show(const Dialog &dialog) {$/;"	f	class:yahtsee::curses::Ui
size_	src/curses_ui.cpp	/^            int size_;$/;"	m	class:yahtsee::curses::Menu	file:
start	src/client.cpp	/^    bool Client::start(const std::string &host, int port) {$/;"	f	class:yahtsee::Client
start	src/orig/caca_game.cpp	/^void caca_game::start()$/;"	f	class:caca_game
start_in_background	src/client.cpp	/^    bool Client::start_in_background(const std::string &host, int port) {$/;"	f	class:yahtsee::Client
state_	src/connection.h	/^        std::shared_ptr<ConnectionState> state_;$/;"	m	class:yahtsee::Connection
state_	src/connection_factory.h	/^        StateManager *state_;$/;"	m	class:yahtsee::ConnectionFactory
state_	src/connection_state.h	/^        StateManager *state_;$/;"	m	class:yahtsee::ConnectionState
state_	src/curses_ui.cpp	/^            StateManager *state_;$/;"	m	class:yahtsee::curses::Ui	file:
state_	src/event_manager.h	/^        StateManager *state_;$/;"	m	class:yahtsee::EventManager
state_	src/game.h	/^        StateManager state_;$/;"	m	class:yahtsee::Game
state_	src/game_state.h	/^        StateManager *state_;$/;"	m	class:yahtsee::GameState
state_	src/state_manager.h	/^        std::shared_ptr<GameState> state_;$/;"	m	class:yahtsee::StateManager
state_ask_name	src/orig/game_state.cpp	/^void game::state_ask_name(int ch)$/;"	f	class:game
state_ask_number_of_players	src/orig/game_state.cpp	/^void game::state_ask_number_of_players(int input)$/;"	f	class:game
state_client_waiting_to_start	src/orig/game_state.cpp	/^void game::state_client_waiting_to_start(int input)$/;"	f	class:game
state_game_menu	src/orig/game_state.cpp	/^void game::state_game_menu(int input)$/;"	f	class:game
state_handler	src/orig/game.h	/^    typedef void (game::*state_handler)(int);$/;"	t	class:game
state_help_menu	src/orig/game_state.cpp	/^void game::state_help_menu(int ch)$/;"	f	class:game
state_hosting_game	src/orig/game_state.cpp	/^void game::state_hosting_game(int ch)$/;"	f	class:game
state_joining_game	src/orig/game_state.cpp	/^void game::state_joining_game(int ch)$/;"	f	class:game
state_joining_online_game	src/orig/game_state.cpp	/^void game::state_joining_online_game(int ch)$/;"	f	class:game
state_multiplayer_join	src/orig/game_state.cpp	/^void game::state_multiplayer_join(int input)$/;"	f	class:game
state_multiplayer_join_game	src/orig/game_state.cpp	/^void game::state_multiplayer_join_game(int input)$/;"	f	class:game
state_multiplayer_menu	src/orig/game_state.cpp	/^void game::state_multiplayer_menu(int input)$/;"	f	class:game
state_playing	src/orig/game_state.cpp	/^void game::state_playing(int input)$/;"	f	class:game
state_quit_confirm	src/orig/game_state.cpp	/^void game::state_quit_confirm(int input)$/;"	f	class:game
state_rolling_dice	src/orig/game_state.cpp	/^void game::state_rolling_dice(int input)$/;"	f	class:game
state_table	src/orig/game.cpp	/^const game::game_state game::state_table[] = {$/;"	m	class:game	file:
state_table	src/orig/game.h	/^    static const game_state state_table[];$/;"	m	class:game
state_waiting_for_connections	src/orig/game_state.cpp	/^void game::state_waiting_for_connections(int input)$/;"	f	class:game
states_	src/orig/game.h	/^    stack<const game_state *> states_;$/;"	m	class:game
stop	src/matchmaker.cpp	/^    void Matchmaker::stop() {$/;"	f	class:yahtsee::Matchmaker
stop_playing	src/orig/game.cpp	/^void game::stop_playing()$/;"	f	class:game
this_player	src/orig/game.cpp	/^shared_ptr<player> game::this_player() const$/;"	f	class:game
to_packet	src/player.cpp	/^    Player::Packet Player::to_packet() const {$/;"	f	class:yahtsee::Player
turn	src/player_manager.cpp	/^    std::shared_ptr<Player> PlayerManager::turn() const {$/;"	f	class:yahtsee::PlayerManager
turn_	src/player_manager.h	/^        PlayerTurn turn_;$/;"	m	class:yahtsee::PlayerManager
ui	src/state_manager.cpp	/^    std::shared_ptr<GameUi> StateManager::ui() { return ui_; }$/;"	f	class:yahtsee::StateManager
ui_	src/state_manager.h	/^        std::shared_ptr<GameUi> ui_;$/;"	m	class:yahtsee::StateManager
unregister_with_service	src/matchmaker.cpp	/^    void Matchmaker::unregister_with_service() {$/;"	f	class:yahtsee::Matchmaker
update	src/curses_ui.cpp	/^            void update() {$/;"	f	class:yahtsee::curses::Menu
update	src/curses_ui.cpp	/^        void Ui::update() {$/;"	f	class:yahtsee::curses::Ui
update	src/game.cpp	/^    Game &Game::update() {$/;"	f	class:yahtsee::Game
update	src/game_state.cpp	/^    void NewSinglePlayerState::update() {$/;"	f	class:yahtsee::NewSinglePlayerState
update	src/game_state.cpp	/^    void WelcomeState::update() {$/;"	f	class:yahtsee::WelcomeState
update	src/input_manager.cpp	/^    void InputManager::update() {$/;"	f	class:yahtsee::InputManager
update	src/orig/caca_game.cpp	/^void caca_game::update()$/;"	f	class:caca_game
update	src/state_manager.cpp	/^    void StateManager::update() {$/;"	f	class:yahtsee::StateManager
update_display	src/orig/caca_game.cpp	/^void caca_game::update_display()$/;"	f	class:caca_game
update_events	src/orig/caca_game.cpp	/^void caca_game::update_events()$/;"	f	class:caca_game
update_input	src/orig/caca_game.cpp	/^void caca_game::update_input()$/;"	f	class:caca_game
upper_scores	src/curses_ui.cpp	/^        yaht::scoresheet::value_type Ui::upper_scores(int color, const yaht::scoresheet &score, int x, int y)$/;"	f	class:yahtsee::curses::Ui
value_	src/input_manager.h	/^        int value_;$/;"	m	class:yahtsee::InputManager
w	src/orig/game.cpp	/^int game::alert_dimensions::w() const$/;"	f	class:game::alert_dimensions
wait	src/orig/caca_game.cpp	/^void game_event::wait()$/;"	f	class:game_event
waiting_for_connections	src/curses_ui.cpp	/^        void Ui::waiting_for_connections() {$/;"	f	class:yahtsee::curses::Ui
waiting_for_players	src/curses_ui.cpp	/^        void Ui::waiting_for_players() {$/;"	f	class:yahtsee::curses::Ui
width	src/orig/alert_box.cpp	/^int alert_box::width() const$/;"	f	class:alert_box
window_	src/curses_ui.cpp	/^            WINDOW *window_;$/;"	m	class:yahtsee::curses::Menu	file:
window_	src/curses_ui.cpp	/^            WINDOW *window_;$/;"	m	class:yahtsee::curses::Ui	file:
worker_	src/orig/caca_game.h	/^    thread worker_;$/;"	m	class:game_event
x	src/orig/alert_box.cpp	/^int alert_box::x() const$/;"	f	class:alert_box
x	src/orig/game.cpp	/^int game::alert_dimensions::x() const$/;"	f	class:game::alert_dimensions
y	src/orig/alert_box.cpp	/^int alert_box::y() const$/;"	f	class:alert_box
y	src/orig/game.cpp	/^int game::alert_dimensions::y() const$/;"	f	class:game::alert_dimensions
yahtsee	src/client.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/client.h	/^namespace yahtsee {$/;"	n
yahtsee	src/connection.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/connection.h	/^namespace yahtsee {$/;"	n
yahtsee	src/connection_factory.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/connection_factory.h	/^namespace yahtsee {$/;"	n
yahtsee	src/connection_state.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/connection_state.h	/^namespace yahtsee {$/;"	n
yahtsee	src/curses_ui.cpp	/^namespace yahtsee$/;"	n	file:
yahtsee	src/event_manager.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/event_manager.h	/^namespace yahtsee {$/;"	n
yahtsee	src/game.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/game.h	/^namespace yahtsee {$/;"	n
yahtsee	src/game_input.h	/^namespace yahtsee {$/;"	n
yahtsee	src/game_logic.cpp	/^namespace yahtsee$/;"	n	file:
yahtsee	src/game_logic.h	/^namespace yahtsee {$/;"	n
yahtsee	src/game_state.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/game_state.h	/^namespace yahtsee {$/;"	n
yahtsee	src/game_ui.cpp	/^namespace yahtsee$/;"	n	file:
yahtsee	src/game_ui.h	/^namespace yahtsee {$/;"	n
yahtsee	src/input_manager.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/input_manager.h	/^namespace yahtsee {$/;"	n
yahtsee	src/matchmaker.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/matchmaker.h	/^namespace yahtsee {$/;"	n
yahtsee	src/multiplayer.cpp	/^namespace yahtsee$/;"	n	file:
yahtsee	src/multiplayer.h	/^namespace yahtsee {$/;"	n
yahtsee	src/player.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/player.h	/^namespace yahtsee {$/;"	n
yahtsee	src/player_manager.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/player_manager.h	/^namespace yahtsee {$/;"	n
yahtsee	src/renderable.h	/^namespace yahtsee {$/;"	n
yahtsee	src/state_manager.cpp	/^namespace yahtsee {$/;"	n	file:
yahtsee	src/state_manager.h	/^namespace yahtsee {$/;"	n
yahtsee	src/updatable.h	/^namespace yahtsee {$/;"	n
~Client	src/client.cpp	/^    Client::~Client() {$/;"	f	class:yahtsee::Client
~Connection	src/connection.cpp	/^    Connection::~Connection() {$/;"	f	class:yahtsee::Connection
~Matchmaker	src/matchmaker.cpp	/^    Matchmaker::~Matchmaker() {$/;"	f	class:yahtsee::Matchmaker
~Menu	src/curses_ui.cpp	/^            ~Menu() {$/;"	f	class:yahtsee::curses::Menu
~Player	src/player.cpp	/^    Player::~Player() {$/;"	f	class:yahtsee::Player
~Ui	src/curses_ui.cpp	/^        Ui::~Ui() {$/;"	f	class:yahtsee::curses::Ui
~caca_game	src/orig/caca_game.cpp	/^caca_game::~caca_game()$/;"	f	class:caca_game
~game_event	src/orig/caca_game.cpp	/^game_event::~game_event()$/;"	f	class:game_event
